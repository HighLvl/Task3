/*
 * This Java source file was generated by the Gradle 'init' ru.nsu.cherepanov.task.
 */
package ru.nsu.cherepanov.task;

import org.apache.commons.cli.*;
import org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import jakarta.xml.bind.JAXBException;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import ru.nsu.cherepanov.task.dao.NodeDao;
import ru.nsu.cherepanov.task.dao.RelationDao;
import ru.nsu.cherepanov.task.dao.WayDao;
import ru.nsu.cherepanov.task.db.Database;
import ru.nsu.cherepanov.task.inflater.DbInflater;
import ru.nsu.cherepanov.task.osm.OpenStreetMapXMLProcessor;

import javax.xml.stream.XMLInputFactory;
import javax.xml.stream.XMLStreamException;
import java.io.*;
import java.sql.SQLException;
import java.util.Comparator;
import java.util.HashMap;
import java.util.Map;

@SpringBootApplication
public class App {
    private static final Logger logger = LogManager.getLogger(App.class);

    public static void main(String[] args) {
        var options = buildOptions();
        var cmdParser = new DefaultParser();
        try {
            var line = cmdParser.parse(options, args);
            if (line.hasOption("h")) {
                new HelpFormatter().printHelp("task", options);
                return;
            }
            var inputFilePath = line.getOptionValue("f");
            String outputFilePath = null;
            if (line.hasOption("o")) {
                outputFilePath = line.getOptionValue("o");
            }
            int insertType = Integer.parseInt(line.getOptionValue("i"));
            new App().launch(inputFilePath, outputFilePath, insertType);
        } catch (Exception e) {
            logger.error(e.getMessage());
            new HelpFormatter().printHelp("task", options);
        }
    }

    private static Options buildOptions() {
        var inputFileOption = Option.builder()
                .option("f")
                .argName("file")
                .hasArg()
                .desc("*.ru.nsu.cherepanov.osm.bz2")
                .required()
                .build();
        var outputOption = Option.builder()
                .option("o")
                .argName("file")
                .hasArg()
                .desc("Statistic out file")
                .build();
        var helpOption = Option.builder()
                .option("h")
                .desc("help")
                .build();
        var insertTypeOption = Option.builder()
                .option("i")
                .hasArg()
                .desc("insert type: 0 - simple, 1 - prepared statement, 2 - batch")
                .required()
                .build();
        var options = new Options();
        options.addOption(inputFileOption);
        options.addOption(outputOption);
        options.addOption(helpOption);
        options.addOption(insertTypeOption);
        return options;
    }

    private void launch(String osmDataPath, String statFilePath, int insertType) {
        logger.info("Hello world!");
        try (var inputStream = openInputStream(osmDataPath);
             var outputStream = getOutputStream(statFilePath)) {
            collectStat(inputStream, outputStream, insertType);
            runRestService();
        } catch (IOException | XMLStreamException | JAXBException | SQLException | ClassNotFoundException e) {
            logger.error(e.getMessage());
        }
    }

    private OutputStream getOutputStream(String statFilePath) throws IOException {
        if (statFilePath == null) {
            return System.out;
        }
        var file = new File(statFilePath);
        if (!file.createNewFile()) {
            logger.info("Output file " + statFilePath + " already exists. Rewrite it");
        } else {
            logger.info("New output file created: " + statFilePath);
        }
        return new FileOutputStream(statFilePath);
    }

    private void collectStat(InputStream inputStream, OutputStream outputStream, int insertType) throws XMLStreamException, JAXBException, SQLException, ClassNotFoundException {
        var xmlReader = XMLInputFactory.newFactory().createXMLStreamReader(inputStream);
        var userToEditNumberMap = new HashMap<String, Integer>();
        var tagKeyToNodeNumberMap = new HashMap<String, Integer>();
        var connection = new Database().connect();
        var dbInflater = new DbInflater(new NodeDao(connection), new RelationDao(connection), new WayDao(connection), DbInflater.InsertType.of(insertType));
        new OpenStreetMapXMLProcessor(xmlReader, userToEditNumberMap, tagKeyToNodeNumberMap, dbInflater).process();
        printStat(userToEditNumberMap, tagKeyToNodeNumberMap, dbInflater.getNodesPerSecond(), outputStream);
        connection.close();
    }

    private void printStat(Map<String, Integer> userToEditNumberMap,
                           Map<String, Integer> tagKeyToNodeNumberMap,
                           float speed,
                           OutputStream outputStream) {
        var writer = new PrintWriter(outputStream, true);
        printStatForMap(userToEditNumberMap, "Number of edits for users:", writer);
        printStatForMap(tagKeyToNodeNumberMap, "Number of tagged nodes for tags:", writer);
        writer.println(String.format("Nodes per second: %.0f", speed));
    }

    private void printStatForMap(Map<String, Integer> map, String title, PrintWriter writer) {
        var entries = map
                .entrySet()
                .stream()
                .sorted(Map.Entry.comparingByValue(Comparator.reverseOrder()));
        writer.println(title);
        entries.forEach((entry) -> writer.println(entry.getKey() + " - " + entry.getValue()));
        writer.println();
    }

    private InputStream openInputStream(String path) throws IOException {
        var file = new File(path);
        return new BZip2CompressorInputStream(new BufferedInputStream(new FileInputStream(file)));
    }

    private void runRestService() {
        SpringApplication.run(App.class);
    }
}
